-- üß≠ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ FPS Limit ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£
setfpscap(7)

-- üì¶ ‡∏î‡∏∂‡∏á Service ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏°
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")

-- üéÆ ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏°‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏°‡∏µ LocalPlayer
repeat task.wait() until game:IsLoaded() and Players.LocalPlayer
local player = Players.LocalPlayer

-- =====================================================
-- ‚öôÔ∏è CONFIG : ‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö
-- =====================================================
local CONFIG = {
    FIRST_MAP_ID = 16146832113,      -- Map 1 : Lobby
    SECOND_MAP_ID = 16277809958,     -- Map 2 : Gameplay

    SPAWN_TIME = 34,                 -- ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏≤‡∏á‡∏ï‡∏±‡∏ß
    SPAWN_DELAY = 0.7,               -- ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
    UPGRADE_DELAY = 1,               -- ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
    UPGRADE_COOLDOWN = 5,            -- ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    VOTE_WAIT = 1,                   -- ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏´‡∏ß‡∏ï‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó
    HEARTBEAT_INTERVAL = 0.5,        -- ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å‡πÜ ‡∏£‡∏≠‡∏ö

    UNIT_LEVEL = 264,                -- ‡πÄ‡∏•‡πÄ‡∏ß‡∏•‡∏Ç‡∏≠‡∏á‡∏¢‡∏π‡∏ô‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ß‡∏≤‡∏á
    UNIT_NAMES = {"Hei", "Quetzalcoatl", "Leo", "Newsman", "Ali"}, -- ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ß‡∏≤‡∏á
    SPAWN_POSITION = Vector3.new(-367.024, 14.299, -204.871),       -- ‡∏à‡∏∏‡∏î‡∏ß‡∏≤‡∏á‡∏¢‡∏π‡∏ô‡∏¥‡∏ï

    CARD_WAVES = {3, 6, 9},          -- Wave ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î
    FINAL_WAVE = 10,                 -- Wave ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢

    SKIP_WAVE_TIMEOUT = 30,          -- ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠ Skip Wave
    WAITFORCHILD_TIMEOUT = 10        -- ‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠ UI/Instance
}

-- =====================================================
-- üß† STATE : ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°
-- =====================================================
local GameState = {
    hasSpawned = false,              -- ‡πÄ‡∏Ñ‡∏¢‡∏ß‡∏≤‡∏á‡∏¢‡∏π‡∏ô‡∏¥‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    missedSpawnTime = false,         -- ‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ß‡∏≤‡∏á‡πÑ‡∏´‡∏°
    lastUpgradeTime = 0,             -- ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    lastHeartbeatCheck = 0,          -- ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏ä‡πá‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    processedWaves = {},             -- Wave ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ó‡∏≥‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
    currentWave = 0                  -- Wave ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
}

-- =====================================================
-- üîß UTILS : ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
-- =====================================================
local Utils = {}

-- ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM:SS ‚Üí ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
function Utils.parseTime(timeStr)
    local h, m, s = timeStr:match("(%d+):(%d+):(%d+)")
    if not h or not m or not s then return 0 end
    return (tonumber(h) * 3600) + (tonumber(m) * 60) + tonumber(s)
end

-- ‡∏ï‡∏±‡∏î tag HTML ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö Wave Label)
function Utils.stripHTMLTags(text)
    local waveNum = text:match('<font transparency="0">(%d+)</font>')
    if waveNum then return waveNum end
    return text:gsub("<[^>]*>", "")
end

-- ‡∏£‡∏≠‡πÉ‡∏´‡πâ Child ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÇ‡∏î‡∏¢‡∏°‡∏µ Timeout ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
function Utils.safeWaitForChild(parent, name, timeout)
    timeout = timeout or CONFIG.WAITFORCHILD_TIMEOUT
    local child = parent:WaitForChild(name, timeout)
    return child
end

-- =====================================================
-- üåê NETWORK : ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á FireServer ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
-- =====================================================
local Network = {}

-- ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Event ‡∏ï‡∏≤‡∏° path ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
function Network.fireServer(path, args)
    local success = pcall(function()
        local event = ReplicatedStorage:WaitForChild("Networking", 5)
        for part in string.gmatch(path, "[^%.]+") do
            event = event:WaitForChild(part, 3)
        end
        event:FireServer(table.unpack(args))
    end)
    return success
end

-- ‡∏™‡∏±‡πà‡∏á‡∏ß‡∏≤‡∏á‡∏¢‡∏π‡∏ô‡∏¥‡∏ï
function Network.spawnUnit(name)
    return Network.fireServer("UnitEvent", {"Render", {name, CONFIG.UNIT_LEVEL, CONFIG.SPAWN_POSITION, 0}})
end

-- ‡∏™‡∏±‡πà‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡∏¢‡∏π‡∏ô‡∏¥‡∏ï
function Network.upgradeUnit(unitName)
    return Network.fireServer("UnitEvent", {"Upgrade", unitName})
end

-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á Wave ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
function Network.chooseCards()
    ReplicatedStorage:WaitForChild("Networking"):WaitForChild("ModifierEvent"):FireServer("Choose", "Evolution")
    task.wait(0.1)
    ReplicatedStorage:WaitForChild("Networking"):WaitForChild("ModifierEvent"):FireServer("Choose", "Nighttime")
end

-- ‡πÇ‡∏´‡∏ß‡∏ï Restart ‡πÄ‡∏Å‡∏°
function Network.voteRestart()
    pcall(function()
        ReplicatedStorage:WaitForChild("Networking"):WaitForChild("MatchRestartSettingEvent"):FireServer("Vote")
    end)
end

-- ‡∏Å‡∏î Skip Wave
function Network.skipWave()
    return Network.fireServer("SkipWaveEvent", {"Skip"})
end

-- =====================================================
-- üéØ GAME LOGIC : ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏´‡∏•‡∏±‡∏Å‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°
-- =====================================================
local GameLogic = {}

-- ‚úÖ ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏à‡∏≠‡∏õ‡∏∏‡πà‡∏° SkipWave ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏Ç‡πâ‡∏≤‡∏°
function GameLogic.waitForSkipWave()
    local playerGui = player:WaitForChild("PlayerGui", CONFIG.WAITFORCHILD_TIMEOUT)
    if not playerGui then return end
    local start = tick()
    while tick() - start < CONFIG.SKIP_WAVE_TIMEOUT do
        local skipWave = playerGui:FindFirstChild("SkipWave")
        if skipWave and skipWave:FindFirstChild("Holder") then
            local yesBtn = skipWave.Holder:FindFirstChild("Yes")
            if yesBtn and yesBtn.Visible then
                Network.skipWave()
                return true
            end
        end
        task.wait(0.3)
    end
end

-- ‚öîÔ∏è ‡∏ß‡∏≤‡∏á‡∏¢‡∏π‡∏ô‡∏¥‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô CONFIG
function GameLogic.spawnAllUnits()
    for _, name in ipairs(CONFIG.UNIT_NAMES) do
        Network.spawnUnit(name)
        task.wait(CONFIG.SPAWN_DELAY)
    end
    GameState.hasSpawned = true
end

-- üíé ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡∏¢‡∏π‡∏ô‡∏¥‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
function GameLogic.upgradeAllUnits()
    if tick() - GameState.lastUpgradeTime < CONFIG.UPGRADE_COOLDOWN then return end
    GameState.lastUpgradeTime = tick()
    local unitFolder = Workspace:FindFirstChild("Units")
    if not unitFolder then return end
    for _, unit in ipairs(unitFolder:GetChildren()) do
        if unit:IsA("Model") then
            Network.upgradeUnit(unit.Name)
            task.wait(CONFIG.UPGRADE_DELAY)
        end
    end
end

-- üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Å‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà
function GameLogic.resetGameState()
    GameState.hasSpawned = false
    GameState.missedSpawnTime = false
    GameState.processedWaves = {}
    GameState.lastUpgradeTime = 0
    GameState.currentWave = 0
end

-- üåä ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ Wave
function GameLogic.handleWave(wave)
    if GameState.processedWaves[wave] then return end

    -- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÉ‡∏ô Wave ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    if table.find(CONFIG.CARD_WAVES, wave) then
        Network.chooseCards()
        GameState.processedWaves[wave] = true
    end

    -- ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á Wave ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‚Üí ‡πÇ‡∏´‡∏ß‡∏ï Restart ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
    if wave == CONFIG.FINAL_WAVE then
        GameState.processedWaves[wave] = true
        Network.voteRestart()
        task.wait(CONFIG.VOTE_WAIT)
        GameLogic.resetGameState()
        task.wait(2)
        runGameplayScript()
    end
end

-- =====================================================
-- üó∫Ô∏è MAP LOGIC : ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÅ‡∏¢‡∏Å‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Lobby / Gameplay
-- =====================================================
-- üè† ‡πÇ‡∏´‡∏°‡∏î Lobby : ‡∏Å‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏° Summer Event
function runLobbyScript()
    task.wait(7)
    local networking = ReplicatedStorage:WaitForChild("Networking", 5)
    if not networking then return end

    local summer = networking:WaitForChild("Summer", 5)
    if summer then
        local summerEvent = summer:WaitForChild("SummerLTMEvent", 5)
        if summerEvent then
            summerEvent:FireServer("Create")
        end
    end

    task.wait(2)
    local lobbyEvent = networking:WaitForChild("LobbyEvent", 5)
    if lobbyEvent then
        lobbyEvent:FireServer("StartMatch")
    end
end

-- ‚öîÔ∏è ‡πÇ‡∏´‡∏°‡∏î Gameplay : ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏≤‡∏á / ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î / ‡πÄ‡∏ä‡πá‡∏Å Wave
function runGameplayScript()
    GameLogic.waitForSkipWave()

    local playerGui = player:WaitForChild("PlayerGui", CONFIG.WAITFORCHILD_TIMEOUT)
    local hud = Utils.safeWaitForChild(playerGui, "HUD")
    local mapFrame = Utils.safeWaitForChild(hud, "Map")
    local sessionTimer = Utils.safeWaitForChild(mapFrame, "SessionTimer")
    local timerLabel = Utils.safeWaitForChild(sessionTimer, "Label")
    local wavesAmountLabel = Utils.safeWaitForChild(mapFrame, "WavesAmount")

    -- ü©∫ Loop ‡πÄ‡∏ä‡πá‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å HEARTBEAT_INTERVAL
    RunService.Heartbeat:Connect(function()
        local now = tick()
        if now - GameState.lastHeartbeatCheck < CONFIG.HEARTBEAT_INTERVAL then return end
        GameState.lastHeartbeatCheck = now

        -- ‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡πÄ‡∏Å‡∏° (‡πÉ‡∏ä‡πâ‡∏à‡∏±‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡∏ß‡∏≤‡∏á‡∏¢‡∏π‡∏ô‡∏¥‡∏ï)
        local timeText = timerLabel.Text
        local seconds = Utils.parseTime(timeText)

        -- ‡∏ß‡∏≤‡∏á‡∏¢‡∏π‡∏ô‡∏¥‡∏ï‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        if not GameState.hasSpawned and not GameState.missedSpawnTime then
            if seconds >= CONFIG.SPAWN_TIME and seconds < CONFIG.SPAWN_TIME + 1 then
                GameLogic.spawnAllUnits()
            elseif seconds > CONFIG.SPAWN_TIME + 1 then
                GameState.missedSpawnTime = true
            end
        end

        -- ‡∏ï‡∏£‡∏ß‡∏à Wave ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        local waveText = wavesAmountLabel.Text
        local cleanText = Utils.stripHTMLTags(waveText)
        local currentWave = tonumber(cleanText)

        if currentWave and currentWave ~= GameState.currentWave then
            GameState.currentWave = currentWave
            GameLogic.handleWave(currentWave)
        end

        -- ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡∏¢‡∏π‡∏ô‡∏¥‡∏ï‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏•‡πà‡∏ô
        if GameState.hasSpawned then
            GameLogic.upgradeAllUnits()
        end
    end)
end

-- =====================================================
-- üöÄ ENTRY POINT : ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ï‡∏≤‡∏° Map ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
-- =====================================================
if game.PlaceId == CONFIG.FIRST_MAP_ID then
    runLobbyScript()
elseif game.PlaceId == CONFIG.SECOND_MAP_ID then
    runGameplayScript()
end
